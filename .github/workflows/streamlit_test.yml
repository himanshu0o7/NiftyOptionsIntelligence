name: Streamlit Test

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test-streamlit:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-timeout
    
    - name: Create test environment file
      run: |
        cat > .env << EOF
        ANGEL_API_KEY=test_api_key
        ANGEL_CLIENT_ID=test_client_id
        ANGEL_PIN=test_pin
        ANGEL_TOTP_SECRET=JBSWY3DPEHPK3PXP
        EOF
    
    - name: Test Streamlit app imports
      run: |
        python -c "
        import sys
        try:
            import streamlit as st
            import app
            print('✅ Streamlit app imports successfully')
        except ImportError as e:
            print(f'❌ Import error: {e}')
            sys.exit(1)
        except SyntaxError as e:
            print(f'❌ Syntax error: {e}')
            sys.exit(1)
        except Exception as e:
            print(f'⚠️  Other error (may be expected): {e}')
        "
    
    - name: Test core modules syntax
      run: |
        python -c "
        import ast
        import os
        import sys
        
        critical_files = [
            'app.py', 'angel_utils.py', 'session_manager.py', 
            'smart_websocket_handler.py', 'token_mapper.py'
        ]
        
        for file in critical_files:
            if os.path.exists(file):
                try:
                    with open(file, 'r') as f:
                        ast.parse(f.read(), filename=file)
                    print(f'✅ {file} syntax OK')
                except SyntaxError as e:
                    print(f'❌ {file} syntax error: {e}')
                    sys.exit(1)
            else:
                print(f'⚠️  {file} not found')
        "
    
    - name: Run streamlit config check
      run: |
        streamlit config show
      timeout-minutes: 2
    
    - name: Test basic streamlit functionality
      run: |
        timeout 30s streamlit run app.py --server.headless true --server.port 8501 &
        sleep 10
        curl -f http://localhost:8501/healthz || echo "Streamlit health check failed but continuing"
        pkill -f streamlit || true
      continue-on-error: true